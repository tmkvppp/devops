AWSTemplateFormatVersion: "2010-09-09"
Description: Architecture for serving the latest image from S3 via Lambda and API Gateway

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: tmkvppkitty
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                Resource:
                  - !Sub "${S3Bucket.Arn}"
                  - !Sub "${S3Bucket.Arn}/*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetLatestImage
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Code:
        ZipFile: |
          import boto3
          s3 = boto3.client('s3')
          BUCKET_NAME = 'tmkvppkitty'

          def lambda_handler(event, context):
              try:
                  objects = s3.list_objects_v2(Bucket=BUCKET_NAME)
                  if 'Contents' not in objects or not objects['Contents']:
                      return {
                          'statusCode': 404,
                          'body': "No objects found in the bucket."
                      }
                  sorted_objects = sorted(objects['Contents'], key=lambda obj: obj['LastModified'], reverse=True)
                  latest_object_key = sorted_objects[0]['Key']
                  # Generate a presigned URL for the object
                  presigned_url = s3.generate_presigned_url('get_object', Params={'Bucket': BUCKET_NAME, 'Key': latest_object_key}, ExpiresIn=3600)
                  html_content = f"""
                      <html>
                          <body>
                              <h1>Latest Image</h1>
                              <img src="{presigned_url}" alt="Latest Image" style="width: 300px; height: auto;" />
                          </body>
                      </html>
                  """
                  return {
                      'statusCode': 200,
                      'headers': {'Content-Type': 'text/html'},
                      'body': html_content
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'body': f"Error: {str(e)}"
                  }

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: LatestImageApi

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: image
      RestApiId: !Ref ApiGateway

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
          - { Region: !Ref "AWS::Region" }

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/image"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

